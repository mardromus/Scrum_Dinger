rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read for authenticated users only
    match /scrums/{scrumId} {
      allow read: if request.auth != null;

      // Creation: only authenticated users may create scrums and createdBy must match the creator
      allow create: if request.auth != null
                    && request.resource.data.createdBy == request.auth.uid
                    && request.resource.data.scheduledAt is timestamp
                    && request.resource.data.attendees is list;

      // Update: only the user who created the scrum may update it
      allow update: if request.auth != null && resource.data.createdBy == request.auth.uid;

      // Delete: only creator may delete
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    // Teams collection: members can read, creator/member can update; creation must set createdBy
    match /teams/{teamId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.createdBy ||
        (resource.data.membersIds is list && request.auth.uid in resource.data.membersIds)
      );

      allow create: if request.auth != null
                    && request.resource.data.createdBy == request.auth.uid
                    && request.resource.data.name is string
                    && request.resource.data.members is list
                    && request.resource.data.membersIds is list;

      allow update: if request.auth != null && (
        resource.data.createdBy == request.auth.uid ||
        (resource.data.membersIds is list && request.auth.uid in resource.data.membersIds)
      );

      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    // Team invites: creators (inviters) can create invites; team members can read invites for their team
    match /teamInvites/{inviteId} {
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid
                    && request.resource.data.teamId is string
                    && request.resource.data.email is string
                    && request.resource.data.code is string;

      allow read: if request.auth != null && (
        resource.data.createdBy == request.auth.uid ||
        // allow team members to read invites for their own team
        exists(/databases/$(database)/documents/teams/$(resource.data.teamId)) &&
        (get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.membersIds has any (id) -> id == request.auth.uid)
      );

      // allow marking invite as used by authenticated user (accept flow)
      allow update: if request.auth != null && resource.data.teamId is string;
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    // Basic fallback for other collections: authenticated reads only
    match /{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // disallow other writes by default
    }
  }
}
